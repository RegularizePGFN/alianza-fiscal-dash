
import { useState, useEffect } from "react";
import { AppLayout } from "@/components/layout/AppLayout";
import { SalesTable } from "@/components/sales/SalesTable";
import { Button } from "@/components/ui/button";
import { PlusCircle, FileUp, FileDown } from "lucide-react";
import { Sale, UserRole, PaymentMethod } from "@/lib/types";
import { useAuth } from "@/contexts/AuthContext";
import { useToast } from "@/hooks/use-toast";
import { SaleFormModal } from "@/components/sales/SaleFormModal";

// Mock sales data to use until we integrate with Supabase
const mockSales: Sale[] = [
  {
    id: "1",
    salesperson_id: "3",
    salesperson_name: "Vendedor Silva",
    gross_amount: 5000,
    net_amount: 4800,
    payment_method: PaymentMethod.BOLETO,
    installments: 1,
    sale_date: "2025-04-20",
  },
  {
    id: "2",
    salesperson_id: "3",
    salesperson_name: "Vendedor Silva",
    gross_amount: 3500,
    net_amount: 3300,
    payment_method: PaymentMethod.PIX,
    installments: 1,
    sale_date: "2025-04-25",
  },
  {
    id: "3",
    salesperson_id: "4",
    salesperson_name: "Vendedor Santos",
    gross_amount: 7000,
    net_amount: 6500,
    payment_method: PaymentMethod.CREDIT,
    installments: 3,
    sale_date: "2025-04-28",
  },
  {
    id: "4",
    salesperson_id: "3",
    salesperson_name: "Vendedor Silva",
    gross_amount: 4200,
    net_amount: 4000,
    payment_method: PaymentMethod.BOLETO,
    installments: 1,
    sale_date: "2025-04-30",
  },
  {
    id: "5",
    salesperson_id: "4",
    salesperson_name: "Vendedor Santos",
    gross_amount: 8500,
    net_amount: 8000,
    payment_method: PaymentMethod.PIX,
    installments: 1,
    sale_date: "2025-05-01",
  },
];

export default function SalesPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [sales, setSales] = useState<Sale[]>([]);
  const [showSaleModal, setShowSaleModal] = useState(false);
  const [editingSale, setEditingSale] = useState<Sale | null>(null);
  
  useEffect(() => {
    // Filter sales based on user role
    if (user?.role === UserRole.SALESPERSON) {
      const filteredSales = mockSales.filter(sale => sale.salesperson_id === user.id);
      setSales(filteredSales);
    } else {
      setSales(mockSales);
    }
  }, [user]);
  
  const handleAddSale = () => {
    setEditingSale(null);
    setShowSaleModal(true);
  };
  
  const handleEdit = (sale: Sale) => {
    setEditingSale(sale);
    setShowSaleModal(true);
  };
  
  const handleDelete = (saleId: string) => {
    // In a real app, we would call an API to delete the sale
    const updatedSales = sales.filter(sale => sale.id !== saleId);
    setSales(updatedSales);
    
    toast({
      title: "Venda excluída",
      description: `A venda #${saleId} foi excluída com sucesso.`,
    });
  };
  
  const handleSaveSale = (sale: Omit<Sale, 'id'>) => {
    if (editingSale) {
      // Update existing sale
      const updatedSales = sales.map(s => 
        s.id === editingSale.id 
          ? { ...sale, id: editingSale.id } 
          : s
      );
      setSales(updatedSales);
      
      toast({
        title: "Venda atualizada",
        description: `A venda foi atualizada com sucesso.`,
      });
    } else {
      // Add new sale
      const newSale = {
        ...sale,
        id: `${sales.length + 1}`, // In a real app, this would be generated by the server
      };
      
      setSales([...sales, newSale]);
      
      toast({
        title: "Venda adicionada",
        description: `Nova venda registrada com sucesso.`,
      });
    }
    
    setShowSaleModal(false);
  };
  
  const isAdmin = user?.role === UserRole.ADMIN;
  const isManager = user?.role === UserRole.MANAGER;
  const isSalesperson = user?.role === UserRole.SALESPERSON;
  
  return (
    <AppLayout>
      <div className="space-y-6">
        <div className="flex justify-between items-start">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Vendas</h2>
            <p className="text-muted-foreground">
              Gerencie as vendas e comissões da equipe.
            </p>
          </div>
          
          <div className="flex gap-2">
            <Button onClick={handleAddSale}>
              <PlusCircle className="mr-2 h-4 w-4" />
              Nova Venda
            </Button>
            
            {(isAdmin || isManager) && (
              <>
                <Button variant="outline">
                  <FileUp className="mr-2 h-4 w-4" />
                  Importar
                </Button>
                <Button variant="outline">
                  <FileDown className="mr-2 h-4 w-4" />
                  Exportar
                </Button>
              </>
            )}
          </div>
        </div>
        
        <SalesTable
          sales={sales}
          showSalesperson={!isSalesperson}
          onEdit={handleEdit}
          onDelete={handleDelete}
        />
        
        {showSaleModal && (
          <SaleFormModal 
            initialData={editingSale}
            onSave={handleSaveSale}
            onCancel={() => setShowSaleModal(false)}
          />
        )}
      </div>
    </AppLayout>
  );
}
