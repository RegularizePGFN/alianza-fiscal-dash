
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://sbxltdbnqixucjoognfj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNieGx0ZGJucWl4dWNqb29nbmZqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNDQxMDksImV4cCI6MjA2MTcyMDEwOX0.ZsH2LX5JVFk7tCC0gGmjP1ZrVlQJ78nSUlMqxW7L1rw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true
    }
  }
);

// Define types for the admin functions we need to implement
interface AdminUserUpdateData {
  email?: string;
  password?: string;
  email_confirm?: boolean;
  user_metadata?: Record<string, any>;
}

// Implementation for admin API functions
// These functions use the appropriate Supabase API endpoints
const adminApiHeaders = {
  apikey: SUPABASE_PUBLISHABLE_KEY,
  Authorization: `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
  "Content-Type": "application/json"
};

// Extend Supabase auth client with admin methods
const adminApi = {
  async deleteUser(userId: string) {
    const response = await fetch(`${SUPABASE_URL}/auth/v1/admin/users/${userId}`, {
      method: 'DELETE',
      headers: adminApiHeaders
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to delete user');
    }
    
    return { error: null };
  },

  async createUser(data: {
    email: string;
    password: string;
    email_confirm?: boolean;
    user_metadata?: Record<string, any>;
  }) {
    const response = await fetch(`${SUPABASE_URL}/auth/v1/admin/users`, {
      method: 'POST',
      headers: adminApiHeaders,
      body: JSON.stringify(data)
    });
    
    const responseData = await response.json();
    
    if (!response.ok) {
      throw new Error(responseData.message || 'Failed to create user');
    }
    
    return { data: responseData, error: null };
  },

  async updateUserById(userId: string, data: AdminUserUpdateData) {
    const response = await fetch(`${SUPABASE_URL}/auth/v1/admin/users/${userId}`, {
      method: 'PUT',
      headers: adminApiHeaders,
      body: JSON.stringify(data)
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to update user');
    }
    
    return { error: null };
  }
};

// Attach admin methods to the Supabase auth client
supabase.auth.admin = adminApi;

// Add custom type for auth admin API
declare module '@supabase/supabase-js' {
  interface SupabaseAuthClient {
    admin: {
      createUser(data: any): Promise<any>;
      deleteUser(uuid: string): Promise<any>;
      updateUserById(uuid: string, data: any): Promise<any>;
    }
  }

  // Partial implementation of GoTrueAdminApi
  // We're only implementing the methods we need and adding ? to the rest
  interface GoTrueAdminApi {
    // Our implemented methods
    createUser: any;
    deleteUser: any;
    updateUserById: any;
    
    // Required by the type but not implemented by us
    signOut?: any;
    inviteUserByEmail?: any;
    generateLink?: any;
    listUsers?: any;
    getUserById?: any;
    mfa?: any;
    url?: any;
    headers?: any;
    fetch?: any;
    resetPasswordForEmail?: any;
  }
}
