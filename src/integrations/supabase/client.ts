
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://sbxltdbnqixucjoognfj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNieGx0ZGJucWl4dWNqb29nbmZqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNDQxMDksImV4cCI6MjA2MTcyMDEwOX0.ZsH2LX5JVFk7tCC0gGmjP1ZrVlQJ78nSUlMqxW7L1rw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true
    }
  }
);

// Secure admin API that calls edge functions instead of exposing service role key
export const adminAPI = {
  async listUsers() {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) throw new Error('No authentication session');

    const response = await fetch(`${SUPABASE_URL}/functions/v1/admin-users`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${session.access_token}`,
        'Content-Type': 'application/json',
      },
    });

    return await response.json();
  },

  async createUser(userData: { email: string; password: string; name: string; role: string }) {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) throw new Error('No authentication session');

    const response = await fetch(`${SUPABASE_URL}/functions/v1/admin-users`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${session.access_token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData),
    });

    return await response.json();
  },

  async updateUserById(userId: string, userData: any) {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) throw new Error('No authentication session');

    const response = await fetch(`${SUPABASE_URL}/functions/v1/admin-users/${userId}`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${session.access_token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(userData),
    });

    return await response.json();
  },

  async deleteUser(userId: string) {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) throw new Error('No authentication session');

    const response = await fetch(`${SUPABASE_URL}/functions/v1/admin-users/${userId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${session.access_token}`,
        'Content-Type': 'application/json',
      },
    });

    return await response.json();
  },

  async getUserById(userId: string) {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) throw new Error('No authentication session');

    const response = await fetch(`${SUPABASE_URL}/functions/v1/admin-users/${userId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${session.access_token}`,
        'Content-Type': 'application/json',
      },
    });

    return await response.json();
  }
};
