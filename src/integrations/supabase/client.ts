
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { AdminUserAttributes, AuthError, GenerateLinkParams, GenerateLinkResponse, GoTrueAdminApi, GoTrueAdminMFAApi, PageParams, Pagination, User, UserResponse } from '@supabase/supabase-js';

const SUPABASE_URL = "https://sbxltdbnqixucjoognfj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNieGx0ZGJucWl4dWNqb29nbmZqIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNDQxMDksImV4cCI6MjA2MTcyMDEwOX0.ZsH2LX5JVFk7tCC0gGmjP1ZrVlQJ78nSUlMqxW7L1rw";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true
    }
  }
);

// Implementation for admin API functions
// These functions use the appropriate Supabase API endpoints
const adminApiHeaders = {
  apikey: SUPABASE_PUBLISHABLE_KEY,
  Authorization: `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
  "Content-Type": "application/json"
};

// Create a proper AuthError with all required properties
const createAuthError = (message: string, status: number): AuthError => {
  return {
    message,
    status,
    name: 'AuthApiError',
    code: `${status}`,
    __isAuthError: true
  };
};

// Admin API implementation
const adminApi = {
  // Implemented methods
  async deleteUser(userId: string): Promise<UserResponse> {
    const response = await fetch(`${SUPABASE_URL}/auth/v1/admin/users/${userId}`, {
      method: 'DELETE',
      headers: adminApiHeaders
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      const error = createAuthError(
        errorData.message || 'Failed to delete user',
        response.status
      );
      return { data: { user: null }, error };
    }
    
    return { data: { user: null }, error: null };
  },

  async createUser(attributes: AdminUserAttributes): Promise<UserResponse> {
    const response = await fetch(`${SUPABASE_URL}/auth/v1/admin/users`, {
      method: 'POST',
      headers: adminApiHeaders,
      body: JSON.stringify(attributes)
    });
    
    const responseData = await response.json();
    
    if (!response.ok) {
      const error = createAuthError(
        responseData.message || 'Failed to create user',
        response.status
      );
      return { data: { user: null }, error };
    }
    
    return { data: { user: responseData }, error: null };
  },

  async updateUserById(uid: string, attributes: AdminUserAttributes): Promise<UserResponse> {
    const response = await fetch(`${SUPABASE_URL}/auth/v1/admin/users/${uid}`, {
      method: 'PUT',
      headers: adminApiHeaders,
      body: JSON.stringify(attributes)
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      const error = createAuthError(
        errorData.message || 'Failed to update user',
        response.status
      );
      return { data: { user: null }, error };
    }
    
    const userData = await response.json();
    return { data: { user: userData }, error: null };
  },

  // Stub methods
  async _listFactors(): Promise<any> { 
    return { data: null, error: null }; 
  },
  
  async _deleteFactor(): Promise<any> { 
    return { data: null, error: null }; 
  },
  
  async signOut(): Promise<{ data: null; error: AuthError | null }> { 
    return { data: null, error: null }; 
  },
  
  async inviteUserByEmail(): Promise<UserResponse> { 
    return { data: { user: null }, error: null }; 
  },
  
  async generateLink(): Promise<GenerateLinkResponse> { 
    return { data: { properties: {}, user: null }, error: null }; 
  },
  
  async listUsers(): Promise<{ data: { users: User[], aud: string, total_count: number, next_page: string }, error: AuthError | null }> { 
    return { data: { users: [], aud: '', total_count: 0, next_page: '' }, error: null }; 
  },
  
  async getUserById(): Promise<UserResponse> { 
    return { data: { user: null }, error: null }; 
  },
  
  async resetPasswordForEmail(): Promise<{ data: {}; error: AuthError | null }> { 
    return { data: {}, error: null }; 
  },
  
  // Properties
  mfa: {} as GoTrueAdminMFAApi,
  url: SUPABASE_URL,
  headers: adminApiHeaders,
  fetch: fetch.bind(window)
};

// Attach admin methods to the Supabase auth client using proper type casting
// We need to cast to unknown first, then to GoTrueAdminApi to avoid TypeScript errors
supabase.auth.admin = adminApi as unknown as GoTrueAdminApi;

// Add custom type for auth admin API
declare module '@supabase/supabase-js' {
  interface SupabaseAuthClient {
    admin: GoTrueAdminApi;
  }
}
